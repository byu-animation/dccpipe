<?xml version="1.0" encoding="UTF-8"?>

<!-- menuDocument can only contain 1 menu whose id is implicitly "root_menu" -->
<menuDocument>
	<menu>
		<!-- ============================ Start Tool Cloner Tool =========================== -->
		<scriptItem id="opmenu.checkoutTool">
			<label>Clone Tool</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.isLockedHDA():
		if node.type().definition() is not None:
			node_path = node.path()
			name = node_path.split('/')[-1]
			name = name.lower()
			if name in Project().list_tools():
				return 0
				print("This is the Cloner Tool MenuItem")
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.cloner import cloner
node = kwargs.get('node', None)
if node:
	import hou
	cloner = cloner.Cloner()
	hou.session.cloner = cloner
	cloner.clone_tool(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Tool Cloner Tool =========================== -->

		<!-- ============================ Start Tool Publisher Tool =========================== -->
		<scriptItem id="opmenu.publishTool">
			<label>Publish Tool</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if not node.isLockedHDA():
		if node.type().definition() is not None:
			node_path = node.path()
			name = node_path.split('/')[-1]
			name = name.lower()
			if name in Project().list_hdas():
				return 1
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.publisher import publisher
node = kwargs.get('node', None)
if node:
	import hou
	publisher = publisher.Publisher()
	hou.session.publisher = publisher
	publisher.publish_tool(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Tool Publisher Tool =========================== -->

		<!-- ============================ Start Tool Rollback Tool =========================== -->
		<scriptItem id="opmenu.rollbackTool">
			<label>Rollback Tool</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.isLockedHDA():
		if node.type().definition() is not None:
			node_path = node.path()
			name = node_path.split('/')[-1]
			name = name.lower()
			if name in Project().list_tools():
				return 0
				print "This is the Rollback Tool MenuItem"
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.rollback import rollback
node = kwargs.get('node', None)
if node:
	import hou
	rollback = rollback.Rollback()
	hou.session.rollback = rollback
	rollback.rollback_tool(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Tool Rollback Tool =========================== -->

		<!-- ============================ Start Asset Cloner Tool =========================== -->
		<scriptItem id="opmenu.checkoutAsset">
			<label>Clone Asset</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.type().definition() is not None:
		node_name = node.type().name()
		index = node_name.rfind('_')
		node_name = node_name[:index]
		node_body = Project().get_body(node_name)
		if node_body:
			if node_body.is_asset():
				return 0  # not allowing this script right now
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.cloner import cloner
node = kwargs.get('node', None)
if node:
	import hou
	cloner = cloner.Cloner()
	hou.session.cloner = cloner
	cloner.clone_asset(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Asset Cloner Tool =========================== -->

		<!-- ============================ Start Individual HDA Asset Publisher Tool =========================== -->
		<scriptItem id="opmenu.publishIndividualAsset">
			<labelExpression>
node = kwargs.get('node', None)
if node:
	if node.type().definition() is not None:
		node_name = node.type().name()
		return "Publish " + str(node_name) + " to Asset"
			</labelExpression>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.type().definition() is not None:
		node_name = node.type().name()
		index = node_name.rfind('_')
		node_name = node_name[:index]
		node_body = Project().get_body(node_name)
		if node_body:
			if node_body.is_asset():
				return 1
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.publisher import publisher
node = kwargs.get('node', None)
if node:
	import hou
	publisher = publisher.Publisher()
	hou.session.publisher = publisher
	publisher.publish_content_hda(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Individual HDA Asset Publisher Tool =========================== -->

		<!-- ============================ Start Top Level Asset Publisher Tool =========================== -->
		<scriptItem id="opmenu.publishAsset">
			<label>Publish Asset</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.type().definition() is not None:
		node_path = node.path()
		node_name = node.type().name()
		index = node_name.rfind('_')
		node_name = node_name[:index]
		if not str(node_name) == "dcc":
			return 0
		name = node_path.split('/')[-1]
		name = name.lower()
		node_body = Project().get_body(name)
		if node_body:
			if node_body.is_asset():
				return 1
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.publisher import publisher
node = kwargs.get('node', None)
if node:
	import hou
	publisher = publisher.Publisher()
	hou.session.publisher = publisher
	node_path = node.path()
	name = node_path.split('/')[-1]
	name = name.lower()
	publisher.publish_asset(node=node, name=name)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Top Level Asset Publisher Tool =========================== -->

		<!-- ============================ Start Asset Rollback Tool =========================== -->
		<scriptItem id="opmenu.rollbackAsset">
			<label>Rollback Element</label>
			<expression>
from pipe.am.project import Project
node = kwargs.get('node', None)
if node:
	if node.type().definition() is not None:
		node_name = node.type().name()
		index = node_name.rfind('_')
		name = node_name[:index]
		department = node_name[index+1:]

		node_body = Project().get_body(name)
		if node_body:
			if node_body.is_asset():
				return 1
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.rollback import rollback
node = kwargs.get('node', None)
node_name = node.type().name()
index = node_name.rfind('_')
name = node_name[:index]
department = node_name[index+1:]
if node:
	import hou
	rollback = rollback.Rollback()
	hou.session.rollback = rollback
	rollback.rollback_element(node, department, name)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Asset Rollback Tool =========================== -->

		<!-- ============================ Start Tool Creator Tool =========================== -->
		<scriptItem id="opmenu.createTool">
			<label>Create DCC Digital Asset</label>
			<expression>
node = kwargs.get('node', None)
if node:
	return node.canCreateDigitalAsset()
return 0
			</expression>
			<scriptCode scriptType="python">
				<![CDATA[
from pipe.tools.houtools.utils import create_tool_hda
node = kwargs.get('node', None)
if node:
	import hou
	create_tool_hda = create_tool_hda.CreateToolHda()
	hou.session.create_tool_hda = create_tool_hda
	create_tool_hda.go(node)
				]]>
			</scriptCode>
		</scriptItem>
		<!-- ============================ End Tool Creator Tool =========================== -->

	</menu>
</menuDocument>
